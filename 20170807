VB Objects: Collection， Debug， Dictionary，FSO(FileSystemObject), etc

1.Collection

Dim X As New Collection

Collection对象陈述这样一个事实：
在Collection对象里面的所有成员是被顺序关联起来的。然而这里面的对象不一定都是完全相同类型的。
这种数据结构仅仅是把一些元素顺序的放在一起。

Collection 对象给我们提供了四个基本方法来实现这种数据结构：
Add : Item, Key, Before, After '此方法将添加一个我们想要的元素进入collection里面。如果提供了key值，则可以通过key值访问它。在不提供key值的情况之下
  我们将需要使用Item(Index)方式访问。注意这里面的Index是从1开始排列的，意思就是说第一个元素就一定是第一个，第二个元素也就一定是第二个。
  ！注意，这里的key值是一个字符串。
  
Count : '此方法没有任何参数，只是单纯的返回一个Long，指代当前所含元素个数。

Remove : Index '这个方法的参数是类型可选的，如果是字符串表达式，则将根据key和值的对应关系进行移除。如果是数值表达式，那么它将会移除此下标之下的值。

Item : Index '这个方法的参数是类型可选的，当我们定义了相关的key值的情况之下，它将返回具体的value。如果Index只是一个数值，则它将会返回一个具体的此下标之下
  所包含的内容。

2.Debug

此对象在调试的时候用到。
提供了两个很实用的方法

Print
Assert

在Immediate窗口中可以看到调试信息。在VBE环境中可以使用 Ctrl + G 打开调试窗口。
Print 用来输出任何类型的表达式。
Assert 用来断言。 后面跟的是一个布尔型的表达式。
当Assert断言的表达式为真时，程序会继续执行下去。然而当Assert不为真，则会自动在Assert的位置终止。
！注意，Assert只会在开发环境中作用。当模块被编译成一个可执行文件的时候，Assert并不会起任何作用。

*关于Print函数的进一步的引申：

    Print函数的原型是Object.Print [Spc(n)|Tab(n) expression charpos]
    在这其中，所有的参数都是可选的，而且其中的Object也是任意的。这个Object可以是一个打印机，一个UserForm，一个图片框，总之，它就是为了图形界面下的
    图形输出的。因此作为任何一种输出介质，它都可以进行输出。
    另外关于expression，它可以是一个字符串表达式，也可以是一个数值表达式。
    剩下的Spc和Tab，则是规定了提前插入几个空格以及制表符。
    在VB里面，一个打印区域是这样规定的：一个打印区域由14个列开始的。每个列则是字符的平均宽度。

    charpos则分为三种情况。在";"的情况下，连续输出到图形界面。在","的情况下，输出到下一个制表符。在缺省的情况下，则会重新起一行进行输出。

3.Dictionary

Remove ：key
这个方法将会根据具体的key值进行移除操作。如果移除成功则会返回true，如果没有移除成功则会返回false。而且当没法找到具体的key的情况之下，也将返回false。

Add ：key(通常是字符串)，variant
这个方法将会使得我们添加具体的字符串的key-Item
！注意，dictionary最大的特性就是不允许有相同的key。这使得我们可以很方便地使用这个对象。如果在代码中添加了相同的key，则会出现运行错误。
  因此我们在添加之前可以先用exists函数判断一下key值的存在与否，进而进行相关的字典操作。

key ：key 此方法将返回具体的key的所对应的key值的引用。从而使得我们可以任意的修改key的值，而保持Item的值不变。

exists ：表示当前数据字典中存不存在这个key。

remove ：表示移除当前key以及它所包含的内容。

removeAll ：表示移除所有的key和Item

keys ：返回一个包含所有key的数组。注意它的起始下标是0

values ：返回一个包含所有Item的数组，注意它的起始下标是0

Item ： 用来从字典里面取值

count ：表示字典中一共有多少个key-Item对。

compareMode ：-1，0，1，2，表示比较模式。

4.FileSystemObject

简称为FSO，是VB6.0之后引进的新对象。代表着整个操作系统的文件系统。
Dim fs As FileSystemObject
Set fs = CreateObject("Scripting.FileSystemObject")

由于这是一个很庞大的体系，所以可以分层进行分析。
Drive对象：代表着文件系统内的所有的驱动。
Dim d As Drive
Set d = fs.GetDrive(fs.GetDriveName(drvPath))

这里面有Drive对象的所有的属性。
比较有用的是AvailableSpace和TotalSize以及FileSystem和DriveType（可移动的？固定的？CD-ROM?）等。

File和Folder对象。
应该没有什么好研究的，只不过有个SubFolders和Files属性可以得到一个Folder的数组和一个File的数组。

TextStream：这个对象用来读写文件。

剩下就是UserForm对象和Err对象了。

这两个对象基本上就是属于那种仔细研究研究的东西了。
